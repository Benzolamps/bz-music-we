{
  "baseVals": {
    "rating": 2,
    "gammaadj": 1,
    "wave_thick": 1,
    "wrap": 0,
    "wave_a": 0.004,
    "wave_scale": 9.731,
    "wave_smoothing": 0,
    "wave_mystery": 1,
    "modwavealphastart": 1,
    "modwavealphaend": 1,
    "warpanimspeed": 0.803,
    "warpscale": 1.22,
    "zoomexp": 1.50374,
    "warp": 0.31218,
    "wave_y": 0.04,
    "ob_size": 0.005,
    "ob_a": 1,
    "ib_size": 0,
    "ib_r": 1,
    "ib_g": 0,
    "ib_b": 0.75,
    "ib_a": 1,
    "mv_x": 64,
    "mv_y": 48,
    "mv_l": 0,
    "mv_b": 0,
    "mv_a": 0,
    "b1ed": 0
  },
  "shapes": [
    { "baseVals": { "enabled": 0 } },
    { "baseVals": { "enabled": 0 } },
    { "baseVals": { "enabled": 0 } },
    {
      "baseVals": {
        "enabled": 1,
        "sides": 3,
        "additive": 1,
        "num_inst": 400,
        "rad": 0.16283,
        "tex_zoom": 0.73458,
        "g": 1,
        "b": 1,
        "g2": 0,
        "border_a": 0
      },
      "init_eqs_str": "a.bending=0;a.ppo=0;a.index=0;a.i3=0;a.dir=0;a.i4=0;a.size=0;a.q2=0;a.q32=0;a.sample=0;a.i3=0;a.i4=0;",
      "frame_eqs_str": "a.i3=.00001<Math.abs(equal(a.instance,0))?0:a.i3;a.i4=.00001<Math.abs(equal(a.instance,0))?0:a.i4;a.ppo=8;a.index=a.i4*a.q32;a.sample=mod(a.i3,a.ppo);a.size=40*a.gmegabuf[Math.floor(a.index+4)];a.x=a.gmegabuf[Math.floor(a.index)];a.y=a.gmegabuf[Math.floor(a.index+1)];a.ang=a.gmegabuf[Math.floor(a.index+9)];a.rad=.05*a.size;a.r=a.gmegabuf[Math.floor(a.index+5)];a.g=a.gmegabuf[Math.floor(a.index+6)];a.b=a.gmegabuf[Math.floor(a.index+7)];a.sample=div(a.sample,a.ppo);a.bending=\n5*a.gmegabuf[Math.floor(a.index+12)]+5*a.gmegabuf[Math.floor(a.index+10)];a.dir=-a.ang+(a.sample-.4)*a.bending;a.ang=1.5*Math.asin(1)-a.dir+.05*a.bending;a.x+=.06*(a.sample-.3)*Math.cos(a.dir)*a.size+Math.sin(a.dir)*a.size*a.bending*.01;a.y+=.06*(a.sample-.3)*Math.sin(a.dir)*a.size-Math.cos(a.dir)*a.size*a.bending*.01;a.x=.5+div(a.x-.5,a.q2);a.rad=1.5*a.rad-.05*a.sample*a.size;a.i3+=1;a.i4=.00001<Math.abs(equal(mod(a.i3,a.ppo),0))?a.i4+1:a.i4;",
      "init_eqs_eel": "i3 = 0; i4 = 0;",
      "frame_eqs_eel": "i3 = if(equal(instance,0),0,i3); i4 = if(equal(instance,0),0,i4); ppo = 8; index = i4*q32; sample = i3 % ppo; size = gmegabuf(index+4)*40; x = gmegabuf(index); y = gmegabuf(index+1); ang = gmegabuf(index+9); rad = size*0.05; r = gmegabuf(index+5); g = gmegabuf(index+6); b = gmegabuf(index+7); sample = sample/ppo; bending = gmegabuf(index + 12)*5 + gmegabuf(index + 10)*5; dir = -ang + (sample-0.4)*bending; ang =  asin(1)*1.5 - dir + bending*0.05; x = x + ((sample-0.3)*0.06*cos(dir)*size + sin(dir)*size*bending*0.01); y = y + ((sample-0.3)*0.06*sin(dir)*size - cos(dir)*size*bending*0.01); x = 0.5 + (x-0.5)/q2; rad = rad*1.5 - sample*0.05*size; i3 = i3 + 1; i4 = if( equal(i3%ppo,0), i4 +1, i4);"
    }
  ],
  "waves": [
    { "baseVals": { "enabled": 0 } },
    {
      "baseVals": {
        "enabled": 1,
        "samples": 65,
        "spectrum": 1,
        "usedots": 1,
        "thick": 1,
        "additive": 1,
        "scaling": 0.33408,
        "smoothing": 0,
        "a": 0
      },
      "init_eqs_str": "a.d=0;a.q32=0;a.t8=0;a.t1=0;a.t2=0;a.t2=0;a.t3=0;a.t4=0;a.cl=0;",
      "frame_eqs_str": "a.t8=1;a.t1=.5;a.t2=.9;",
      "point_eqs_str": "a.d=0;a.y=.2+a.value1+a.value2;a.x=.9-.8*a.sample;a.gmegabuf[Math.floor((64*a.sample-1)*a.q32+14)]=a.value1+a.value2;",
      "init_eqs_eel": "t2 = 0; t3 = 0; t4 = 0; cl = 0;",
      "frame_eqs_eel": "t8 = 1; t1 = 0.5; t2 = 0.9;",
      "point_eqs_eel": "d = 0; y = 0.2 + value1+value2; x = 0.9 - sample*0.8; gmegabuf((sample*64-1)*q32 + 14) = value1 + value2;"
    },
    { "baseVals": { "enabled": 0 } },
    { "baseVals": { "enabled": 0 } }
  ],
  "init_eqs_str": "a.fric=0;a.d=0;a.nliststart=0;a.w=0;a.random=0;a.index2=0;a.index=0;a.w2=0;a.rotatefactor=0;a.ref_ang=0;a.smaller=0;a.dt=0;a.q1=0;a.j=0;a.v=0;a.bend_force=0;a.count=0;a.shock=0;a.nn=0;a.vrr=0;a.check=0;a.gravity=0;a.vr2=0;a.direction=0;a.bouncefactor=0;a.smallestfind=0;a.distance=0;a.bend=0;a.bounce=0;a.vr=0;a.vv1=0;a.vv2=0;a.vrr2=0;a.w1=0;a.attributes=0;a.i=0;a.m2=0;a.hit=0;a.q2=0;a.m1=0;a.h=0;a.v1=0;a.q3=0;a.acceleration=0;a.findindex=0;a.friction=0;a.pi2=0;a.sample=0;a.v2=\n0;a.dampening=0;for(var b=a.i=0;1048576>b;b++)a.gmegabuf[Math.floor(a.i)]=0,a.i+=1;a.count=50;a.attributes=32;a.nliststart=24;a.minradius=.01;a.maxradius=.04;a.v=0;for(b=a.index=0;b<a.count;b++)a.gmegabuf[Math.floor(a.index*a.attributes)]=div(randint(1E3),1E3),a.gmegabuf[Math.floor(a.index*a.attributes+1)]=div(randint(1E3),1E3),a.gmegabuf[Math.floor(a.index*a.attributes+2)]=a.v*(div(randint(1E3),1E3)-.5),a.gmegabuf[Math.floor(a.index*a.attributes+3)]=a.v*(div(randint(1E3),1E3)-.5),a.gmegabuf[Math.floor(a.index*\na.attributes+4)]=a.minradius+div((a.maxradius-a.minradius)*(a.index+1),a.count),a.gmegabuf[Math.floor(a.index*a.attributes+5)]=div(randint(1E3),1E3),a.gmegabuf[Math.floor(a.index*a.attributes+6)]=div(randint(1E3),1E3),a.gmegabuf[Math.floor(a.index*a.attributes+7)]=div(randint(1E3),1E3),a.gmegabuf[Math.floor(a.index*a.attributes+8)]=pow(a.gmegabuf[Math.floor(a.index*a.attributes+4)],3),a.gmegabuf[Math.floor(a.index*a.attributes+9)]=div(4*Math.asin(1)*randint(1E3),1E3),a.gmegabuf[Math.floor(a.index*\na.attributes+10)]=0,a.gmegabuf[Math.floor(a.index*a.attributes+13)]=div(a.index,a.count-1),a.gmegabuf[Math.floor(a.index*a.attributes+14)]=0,a.index+=1;a.q30=a.nliststart;a.q31=a.count;a.q32=a.attributes;",
  "frame_eqs_str": "a.random=div(randint(1E3),1E3);a.dt=div(1,a.fps);a.bend_force=.92*a.bend_force-4*a.bend*a.dt+2*(a.random-.5)*a.dt;a.bend+=60*a.bend_force*a.dt;a.q3=4*a.bend;a.monitor=a.bend;a.warp=0;a.zoom=1;a.gravity=0*a.dt;a.dampening=0;a.friction=2048*a.dt;a.shock=.002;a.pi2=Math.asin(1);a.nn=3;a.check=2;a.bouncefactor=.1;a.rotatefactor=0;a.h=.5*(a.aspecty-1);a.w=.5*(a.aspectx-1);a.index=0;for(var c=a.index2=0;c<a.count;c++){a.random=div(randint(1E3),1E3);a.sample=a.gmegabuf[Math.floor(a.index+\n13)];a.gmegabuf[Math.floor(a.index+11)]=.92*a.gmegabuf[Math.floor(a.index+11)]-4*a.gmegabuf[Math.floor(a.index+12)]*a.dt+2*(a.random-.5)*a.dt*a.gmegabuf[Math.floor(a.index+14)];a.gmegabuf[Math.floor(a.index+12)]+=60*a.gmegabuf[Math.floor(a.index+11)]*a.dt;a.v=sqrt(sqr(a.gmegabuf[Math.floor(a.index+2)])+sqr(a.gmegabuf[Math.floor(a.index+3)]));a.fric=Math.max(0,1-sqr(a.v*a.friction)-2*a.v);a.gmegabuf[Math.floor(a.index+2)]*=a.fric;a.gmegabuf[Math.floor(a.index+3)]*=a.fric;a.gmegabuf[Math.floor(a.index+\n10)]=a.gmegabuf[Math.floor(a.index+10)]*a.fric+a.v*a.gmegabuf[Math.floor(a.index+12)]*0;a.acceleration=0*a.random+.003*Math.abs(a.gmegabuf[Math.floor(a.index+11)]);a.direction=a.gmegabuf[Math.floor(a.index+9)]-a.pi2;a.gmegabuf[Math.floor(a.index+2)]+=Math.sin(a.direction)*a.acceleration;a.gmegabuf[Math.floor(a.index+3)]+=Math.cos(a.direction)*a.acceleration;a.gmegabuf[Math.floor(a.index)]+=60*a.gmegabuf[Math.floor(a.index+2)]*a.dt;a.gmegabuf[Math.floor(a.index+1)]+=60*a.gmegabuf[Math.floor(a.index+\n3)]*a.dt;a.gmegabuf[Math.floor(a.index+9)]+=.5*a.gmegabuf[Math.floor(a.index+10)];a.gmegabuf[Math.floor(a.index+3)]-=a.gravity;a.vr=Math.sin(a.gmegabuf[Math.floor(a.index+10)])*a.gmegabuf[Math.floor(a.index+4)];a.bounce=above(a.gmegabuf[Math.floor(a.index+1)],1-a.gmegabuf[Math.floor(a.index+4)]+a.w);a.gmegabuf[Math.floor(a.index+2)]=.00001<Math.abs(a.bounce)?a.gmegabuf[Math.floor(a.index+2)]+(a.vr+a.gmegabuf[Math.floor(a.index+2)])*a.rotatefactor:a.gmegabuf[Math.floor(a.index+2)];a.gmegabuf[Math.floor(a.index+\n3)]=.00001<Math.abs(a.bounce)?-Math.abs(a.gmegabuf[Math.floor(a.index+3)])*a.dampening-a.shock:a.gmegabuf[Math.floor(a.index+3)];a.vr=.00001<Math.abs(a.bounce)?a.vr-(a.gmegabuf[Math.floor(a.index+2)]+a.vr)*(1-a.rotatefactor):a.vr;a.bounce=below(a.gmegabuf[Math.floor(a.index+1)],a.gmegabuf[Math.floor(a.index+4)]-a.w);a.gmegabuf[Math.floor(a.index+2)]=.00001<Math.abs(a.bounce)?a.gmegabuf[Math.floor(a.index+2)]+(a.vr-a.gmegabuf[Math.floor(a.index+2)])*a.rotatefactor:a.gmegabuf[Math.floor(a.index+2)];\na.gmegabuf[Math.floor(a.index+3)]=.00001<Math.abs(a.bounce)?Math.abs(a.gmegabuf[Math.floor(a.index+3)])*a.dampening+a.shock:a.gmegabuf[Math.floor(a.index+3)];a.vr=.00001<Math.abs(a.bounce)?a.vr+(a.gmegabuf[Math.floor(a.index+2)]-a.vr)*(1-a.rotatefactor):a.vr;a.bounce=above(a.gmegabuf[Math.floor(a.index)],1-a.gmegabuf[Math.floor(a.index+4)]+a.h);a.gmegabuf[Math.floor(a.index+2)]=.00001<Math.abs(a.bounce)?-Math.abs(a.gmegabuf[Math.floor(a.index+2)])*a.dampening-a.shock:a.gmegabuf[Math.floor(a.index+\n2)];a.gmegabuf[Math.floor(a.index+3)]=.00001<Math.abs(a.bounce)?a.gmegabuf[Math.floor(a.index+3)]+(a.vr-a.gmegabuf[Math.floor(a.index+3)])*a.rotatefactor:a.gmegabuf[Math.floor(a.index+3)];a.vr=.00001<Math.abs(a.bounce)?a.vr+(a.gmegabuf[Math.floor(a.index+3)]-a.vr)*(1-a.rotatefactor):a.vr;a.bounce=below(a.gmegabuf[Math.floor(a.index)],a.gmegabuf[Math.floor(a.index+4)]-a.h);a.gmegabuf[Math.floor(a.index+2)]=.00001<Math.abs(a.bounce)?Math.abs(a.gmegabuf[Math.floor(a.index+2)])*a.dampening+a.shock:a.gmegabuf[Math.floor(a.index+\n2)];a.gmegabuf[Math.floor(a.index+3)]=.00001<Math.abs(a.bounce)?a.gmegabuf[Math.floor(a.index+3)]-(a.vr+a.gmegabuf[Math.floor(a.index+3)])*a.rotatefactor:a.gmegabuf[Math.floor(a.index+3)];a.vr=.00001<Math.abs(a.bounce)?a.vr-(a.gmegabuf[Math.floor(a.index+3)]+a.vr)*(1-a.rotatefactor):a.vr;a.gmegabuf[Math.floor(a.index+10)]=Math.asin(div(a.vr,a.gmegabuf[Math.floor(a.index+4)]));a.i=0;for(var b=a.j=0;b<a.count;b++)a.d=sqrt(sqr(a.gmegabuf[Math.floor(a.index)]-a.gmegabuf[Math.floor(a.i)])+sqr(a.gmegabuf[Math.floor(a.index+\n1)]-a.gmegabuf[Math.floor(a.i+1)])),a.d=.00001<Math.abs(equal(a.d,0))?10:a.d,a.d-=.5*(a.gmegabuf[Math.floor(a.index+4)]+a.gmegabuf[Math.floor(a.i+4)]),a.megabuf[Math.floor(a.j)]=a.i,a.megabuf[Math.floor(a.j+1)]=a.d,a.j+=2,a.i+=a.attributes;for(b=a.i=0;b<a.nn;b++){a.j=a.i;a.smallestfind=10;a.findindex=-1;for(var d=0;d<a.count-a.j;d++)a.distance=a.megabuf[Math.floor(2*a.j+1)],a.smaller=above(a.smallestfind,a.distance),a.smallestfind=.00001<Math.abs(a.smaller)?a.distance:a.smallestfind,a.findindex=.00001<\nMath.abs(a.smaller)?2*a.j:a.findindex,a.j+=1;a.j=a.megabuf[Math.floor(2*a.i)];a.d=a.megabuf[Math.floor(2*a.i+1)];a.megabuf[Math.floor(2*a.i)]=a.megabuf[Math.floor(a.findindex)];a.megabuf[Math.floor(2*a.i+1)]=a.megabuf[Math.floor(a.findindex+1)];a.megabuf[Math.floor(a.findindex)]=a.j;a.megabuf[Math.floor(a.findindex+1)]=a.d;a.i+=1}for(b=a.i=0;b<a.nn;b++)a.gmegabuf[Math.floor(a.index+a.nliststart+a.i)]=a.megabuf[Math.floor(2*a.i)],a.i+=1;for(b=a.i=0;b<a.check;b++)a.index2=a.megabuf[Math.floor(a.i)],\na.hit=below(sqrt(sqr(a.gmegabuf[Math.floor(a.index)]-a.gmegabuf[Math.floor(a.index2)])+sqr(a.gmegabuf[Math.floor(a.index+1)]-a.gmegabuf[Math.floor(a.index2+1)])),a.gmegabuf[Math.floor(a.index+4)]+a.gmegabuf[Math.floor(a.index2+4)])*above(sqrt(sqr(a.gmegabuf[Math.floor(a.index)]-a.gmegabuf[Math.floor(a.index2)])+sqr(a.gmegabuf[Math.floor(a.index+1)]-a.gmegabuf[Math.floor(a.index2+1)])),sqrt(sqr(a.gmegabuf[Math.floor(a.index+0)]-a.gmegabuf[Math.floor(a.index2+0)]+a.gmegabuf[Math.floor(a.index+2)]-a.gmegabuf[Math.floor(a.index2+\n2)])+sqr(a.gmegabuf[Math.floor(a.index+1)]-a.gmegabuf[Math.floor(a.index2+1)]+a.gmegabuf[Math.floor(a.index+3)]-a.gmegabuf[Math.floor(a.index2+3)]))),a.ref_ang=Math.atan2(a.gmegabuf[Math.floor(a.index2)]-a.gmegabuf[Math.floor(a.index)],a.gmegabuf[Math.floor(a.index2+1)]-a.gmegabuf[Math.floor(a.index+1)])+a.pi2,a.v1=sqrt(sqr(a.gmegabuf[Math.floor(a.index+2)])+sqr(a.gmegabuf[Math.floor(a.index+3)])),a.v2=sqrt(sqr(a.gmegabuf[Math.floor(a.index2+2)])+sqr(a.gmegabuf[Math.floor(a.index2+3)])),a.w1=Math.atan2(a.gmegabuf[Math.floor(a.index+\n2)],a.gmegabuf[Math.floor(a.index+3)]),a.w2=Math.atan2(a.gmegabuf[Math.floor(a.index2+2)],a.gmegabuf[Math.floor(a.index2+3)]),a.vr2=Math.sin(a.gmegabuf[Math.floor(a.index2+10)])*a.gmegabuf[Math.floor(a.index2+4)],a.m1=a.gmegabuf[Math.floor(a.index+8)],a.m2=a.gmegabuf[Math.floor(a.index2+8)],a.vv1=div((a.m1-a.m2)*a.v1+2*a.m2*a.v2,a.m1+a.m2),a.vv2=div((a.m2-a.m1)*a.v2+2*a.m1*a.v1,a.m1+a.m2),a.vrr=div((a.m1-a.m2)*a.vr+2*a.m2*a.vr2,a.m1+a.m2),a.vrr2=div((a.m2-a.m1)*a.vr2+2*a.m1*a.vr,a.m1+a.m2),a.gmegabuf[Math.floor(a.index+\n2)]=.00001<Math.abs(a.hit)?Math.sin(a.ref_ang)*a.v1*Math.cos(a.w1-a.ref_ang)+(a.vr-a.vr2-Math.sin(a.ref_ang)*a.v1*Math.cos(a.w1-a.ref_ang))*a.rotatefactor+Math.cos(a.ref_ang)*a.vv1*Math.sin(a.w2-a.ref_ang):a.gmegabuf[Math.floor(a.index+2)],a.gmegabuf[Math.floor(a.index+3)]=.00001<Math.abs(a.hit)?Math.cos(a.ref_ang)*a.v1*Math.cos(a.w1-a.ref_ang)+(a.vr-a.vr2-Math.cos(a.ref_ang)*a.v1*Math.cos(a.w1-a.ref_ang))*a.rotatefactor-Math.sin(a.ref_ang)*a.vv1*Math.sin(a.w2-a.ref_ang):a.gmegabuf[Math.floor(a.index+\n3)],a.gmegabuf[Math.floor(a.index2+2)]=.00001<Math.abs(a.hit)?Math.sin(a.ref_ang)*a.v2*Math.cos(a.w2-a.ref_ang)+(a.vr2-a.vr-Math.sin(a.ref_ang)*a.v2*Math.cos(a.w2-a.ref_ang))*a.rotatefactor+Math.cos(a.ref_ang)*a.vv2*Math.sin(a.w1-a.ref_ang):a.gmegabuf[Math.floor(a.index2+2)],a.gmegabuf[Math.floor(a.index2+3)]=.00001<Math.abs(a.hit)?Math.cos(a.ref_ang)*a.v2*Math.cos(a.w2-a.ref_ang)+(a.vr2-a.vr-Math.cos(a.ref_ang)*a.v2*Math.cos(a.w2-a.ref_ang))*a.rotatefactor-Math.sin(a.ref_ang)*a.vv2*Math.sin(a.w1-\na.ref_ang):a.gmegabuf[Math.floor(a.index2+3)],a.vr=.00001<Math.abs(a.hit)?a.vrr+(Math.cos(a.w1-a.ref_ang)*(a.v1-a.v2)-a.vrr)*(1-a.rotatefactor):a.vr,a.gmegabuf[Math.floor(a.index+10)]=Math.asin(div(a.vr,a.gmegabuf[Math.floor(a.index+4)])),a.vr2=.00001<Math.abs(a.hit)?a.vrr2+(Math.cos(a.w2-a.ref_ang)*(a.v2-a.v1)-a.vrr2)*(1-a.rotatefactor):a.vr2,a.gmegabuf[Math.floor(a.index2+10)]=Math.asin(div(a.vr2,a.gmegabuf[Math.floor(a.index2+4)])),a.i+=2;a.index+=a.attributes}a.q1=a.aspectx;a.q2=a.aspecty;",
  "pixel_eqs_str": "",
  "init_eqs_eel": "i = 0; loop(1024*1024, gmegabuf(i) = 0; i = i+1;); count = 50; attributes = 32; nListStart = 24; minradius = 0.01; maxradius = 0.04; v = 0.0; index = 0; loop(count, gmegabuf(index*attributes) = rand(1000)/1000; gmegabuf(index*attributes+1) = rand(1000)/1000; gmegabuf(index*attributes+2) = v*(rand(1000)/1000-0.5); gmegabuf(index*attributes+3) = v*(rand(1000)/1000-0.5); gmegabuf(index*attributes+4) = minradius + (maxradius-minradius)*(index+1)/count; gmegabuf(index*attributes+5) = rand(1000)/1000; gmegabuf(index*attributes+6) = rand(1000)/1000; gmegabuf(index*attributes+7) = rand(1000)/1000; gmegabuf(index*attributes+8) = pow(gmegabuf(index*attributes+4),3) ; gmegabuf(index*attributes+9) = 4*asin(1)*rand(1000)/1000; gmegabuf(index*attributes+10) = 0; gmegabuf(index*attributes+13) = index/(count-1); gmegabuf(index*attributes+14) = 0; index = index+1; ); q30 = nListStart; q31 = count; q32 = attributes;",
  "frame_eqs_eel": "random = rand(1000)/1000; dt = 1/fps; bend_force = bend_force*0.92 - 4*bend*dt + 2*(random-0.5)*dt; bend = bend + 60*bend_force*dt; q3 = bend*4; monitor = bend; warp = 0; zoom = 1; gravity = 0.0015*dt*0; dampening = 0; friction = 2048*dt; shock = 0.002; pi2 = asin(1); nn = 3; check = 2; bouncefactor = 0.1; rotatefactor = 0.0; h = (aspecty-1)*0.5; w = (aspectx-1)*0.5; index = 0; index2 = 0; loop(count, random = rand(1000)/1000; sample = gmegabuf(index+13); gmegabuf(index + 11) = gmegabuf(index + 11)*0.92 - 4*gmegabuf(index+12)*dt + 2*(random-0.5)*dt*gmegabuf(index+14); gmegabuf(index + 12) += 60*gmegabuf(index + 11)*dt; v = sqrt( sqr( gmegabuf(index + 2) ) + sqr( gmegabuf(index + 3) ) ); fric = max(0,1 - sqr(v*friction) - v*2); gmegabuf(index + 2) *= fric; gmegabuf(index + 3) *= fric; gmegabuf(index + 10) = gmegabuf(index + 10)*fric +  v*gmegabuf(index +12)*0; acceleration = random*0.000 + abs(gmegabuf(index+11))*0.003; direction = gmegabuf(index + 9) - pi2; gmegabuf(index + 2) += sin(direction)*acceleration; gmegabuf(index + 3) += cos(direction)*acceleration; gmegabuf(index) = gmegabuf(index) + gmegabuf(index+2)*60*dt; gmegabuf(index+1) = gmegabuf(index+1) + gmegabuf(index+3)*60*dt; gmegabuf(index+9) = gmegabuf(index+9) + gmegabuf(index+10)*0.5; gmegabuf(index+3) = gmegabuf(index+3) - gravity; vr = sin(gmegabuf(index+10))*gmegabuf(index+4); bounce = above( gmegabuf(index+1), 1 - gmegabuf(index+4) + w); gmegabuf(index+2) = if( bounce, gmegabuf(index+2) + (vr+gmegabuf(index+2))*rotatefactor, gmegabuf(index+2)); gmegabuf(index+3) = if( bounce, -abs(gmegabuf(index+3))*dampening - shock, gmegabuf(index+3)); vr = if( bounce, vr - (gmegabuf(index+2) + vr)*(1-rotatefactor), vr); bounce = below( gmegabuf(index+1), gmegabuf(index+4) - w); gmegabuf(index+2) = if( bounce, gmegabuf(index+2) + (vr-gmegabuf(index+2))*rotatefactor, gmegabuf(index+2)); gmegabuf(index+3) = if( bounce, abs(gmegabuf(index+3))*dampening + shock, gmegabuf(index+3)); vr = if( bounce, vr + (gmegabuf(index+2) - vr)*(1-rotatefactor), vr); bounce = above( gmegabuf(index), 1 - gmegabuf(index+4) + h); gmegabuf(index+2) = if( bounce, -abs(gmegabuf(index+2))*dampening - shock, gmegabuf(index+2)); gmegabuf(index+3) = if( bounce, gmegabuf(index+3) + (vr-gmegabuf(index+3))*rotatefactor, gmegabuf(index+3)); vr = if( bounce, vr + (gmegabuf(index+3) - vr)*(1-rotatefactor), vr); bounce = below( gmegabuf(index), gmegabuf(index+4) - h); gmegabuf(index+2) = if( bounce, abs(gmegabuf(index+2))*dampening + shock, gmegabuf(index+2)); gmegabuf(index+3) = if( bounce, gmegabuf(index+3) - (vr+gmegabuf(index+3))*rotatefactor, gmegabuf(index+3)); vr = if( bounce, vr - (gmegabuf(index+3) + vr)*(1-rotatefactor), vr); gmegabuf(index+10) = asin(vr/gmegabuf(index+4)); i = 0; j = 0; loop( count, d = sqrt( sqr(gmegabuf(index)-gmegabuf(i)) + sqr(gmegabuf(index+1)-gmegabuf(i+1))); d = if( equal(d,0), 10, d); d = d - (gmegabuf(index+4)+gmegabuf(i+4))*0.5; megabuf(j)   = i; megabuf(j+1) = d; j = j+2; i = i+attributes; ); i = 0; loop( nn, j = i; smallestfind = 10; findindex = -1; loop( count-j, distance =megabuf(j*2+1); smaller = above( smallestfind, distance); smallestfind = if(smaller, distance, smallestfind); findindex = if( smaller, j*2, findindex); j = j + 1; ); j = megabuf(i*2); d = megabuf(i*2+1); megabuf(i*2)   = megabuf(findindex); megabuf(i*2+1) = megabuf(findindex+1); megabuf(findindex)   = j; megabuf(findindex+1) = d; i = i+1; ); i = 0; loop( nn, gmegabuf(index + nListStart + i) = megabuf(i*2); i = i +1; ); i = 0; loop( check, index2 = megabuf(i); hit = below( sqrt( sqr( gmegabuf(index) - gmegabuf(index2)) + sqr( gmegabuf(index+1) - gmegabuf(index2+1))), gmegabuf(index + 4) + gmegabuf(index2 + 4) ) * above( sqrt( sqr( gmegabuf(index)   - gmegabuf(index2))+ sqr( gmegabuf(index+1) - gmegabuf(index2+1))), sqrt( sqr( gmegabuf(index+0) - gmegabuf(index2+0)+ gmegabuf(index+2) - gmegabuf(index2+2))+ sqr( gmegabuf(index+1) - gmegabuf(index2+1)+ gmegabuf(index+3) - gmegabuf(index2+3)) ) ); ref_ang = atan2( gmegabuf(index2)-gmegabuf(index), gmegabuf(index2 + 1)-gmegabuf(index + 1)) + pi2; v1 = sqrt(sqr( gmegabuf(index + 2)) + sqr( gmegabuf(index + 3))); v2 = sqrt(sqr( gmegabuf(index2 + 2)) + sqr( gmegabuf(index2 + 3))); w1 = atan2( gmegabuf(index + 2), gmegabuf(index + 3)); w2 = atan2( gmegabuf(index2 + 2), gmegabuf(index2 + 3)); vr2 = sin(gmegabuf(index2 + 10))*gmegabuf(index2+4); m1 = gmegabuf(index + 8); m2 = gmegabuf(index2 + 8); vv1 = ((m1-m2)*v1 + 2*m2*v2)/(m1+m2); vv2 = ((m2-m1)*v2 + 2*m1*v1)/(m1+m2); vrr = ((m1-m2)*vr + 2*m2*vr2)/(m1+m2); vrr2 = ((m2-m1)*vr2 + 2*m1*vr)/(m1+m2); gmegabuf( index + 2) = if( hit, sin(ref_ang)*v1*cos(w1-ref_ang) + ((vr-vr2)-sin(ref_ang)*v1*cos(w1-ref_ang))*rotatefactor + cos(ref_ang)*vv1*sin(w2-ref_ang), gmegabuf( index + 2) ); gmegabuf( index + 3) = if( hit, cos(ref_ang)*v1*cos(w1-ref_ang) + ((vr-vr2)-cos(ref_ang)*v1*cos(w1-ref_ang))*rotatefactor - sin(ref_ang)*vv1*sin(w2-ref_ang), gmegabuf( index + 3) ); gmegabuf( index2 + 2) = if( hit, sin(ref_ang)*v2*cos(w2-ref_ang) + ((vr2-vr)-sin(ref_ang)*v2*cos(w2-ref_ang))*rotatefactor + cos(ref_ang)*vv2*sin(w1-ref_ang), gmegabuf( index2 + 2) ); gmegabuf( index2 + 3) = if( hit, cos(ref_ang)*v2*cos(w2-ref_ang) + ((vr2-vr)-cos(ref_ang)*v2*cos(w2-ref_ang))*rotatefactor - sin(ref_ang)*vv2*sin(w1-ref_ang), gmegabuf( index2 + 3) ); vr = if( hit, vrr + (cos(w1-ref_ang)*(v1-v2)-vrr)*(1-rotatefactor) , vr); gmegabuf( index + 10) = asin( vr / gmegabuf(index+4) ); vr2 = if( hit, vrr2 + (cos(w2-ref_ang)*(v2-v1)-vrr2)*(1-rotatefactor) , vr2); gmegabuf( index2 + 10) = asin( vr2 / gmegabuf(index2+4) ); i=i+2; ); index = index+attributes; ); q1 = aspectx; q2 = aspecty;",
  "pixel_eqs_eel": "",
  "warp": " shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (texture (sampler_main, uv).xyz * 0.45);\n  ret = tmpvar_1.xyz;\n }",
  "comp": " shader_body { \n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_main, uv).xyz;\n  ret = tmpvar_1.xyz;\n }"
}
